from scipy import special as sp
import numpy
import matplotlib.pyplot as plt
import math
import random


def getBesselMatrix(n):
    #bessel function
    m = [[(10.0 * x / n - 5.0) ** 2.0 + (10.0 * y / n - 5.0) ** 2.0
        for x in range(0, n, 1)] for y in range(0, n, 1)]
    zBessel = sp.j0(m)
    return zBessel


def gaussian(x, y, meanX, meanY, stddev):
    return math.exp(-0.5 * (((x - meanX) / stddev) ** 2.0) -
            0.5 * (((y - meanY) / stddev) ** 2.0))


def getGaussianMatrix(n):
    #gaussian function
    m = [[gaussian(10.0 * float(x) / n, 10.0 * float(y) / n, 5.0, 5.0, 1.5)
            for x in range(0, n, 1)] for y in range(0, n, 1)]
    return m

def doublingMapping(x,par):
    if x < 0.5:
        return 2.0 * x
    else:
        return 2.0 * x - 1.0


def logisticMap(x, par):
    a=par[0]
    return (a * x * (1.0 - x))

def somMap(x, par):
    a = par[0]
    b = par[1]
    gamma = 0.8 / (1.0 + a)
    if x < gamma:
        return (a * x + 0.2)
    elif x < 0.8:
        return (x - 0.8) / a + 1.0
    else:
        return (1.0 - x) / b


def getCMLNeumann(mat, function, coupledParameter,parameters=[]):
    outputMat = [row[:] for row in mat]
    rows = len(mat)
    cols = len(mat[0])
    for i in range(rows):
        for j in range(cols):
            outputMat[i][j] = coupledParameter * function(mat[i][j],parameters)
            outputMat[i][j] += ((1.0 - coupledParameter) / 4.0) \
                                * function(mat[(i + 1) % rows][j],parameters)
            outputMat[i][j] += ((1.0 - coupledParameter) / 4.0) \
                                * function(mat[i][(j + 1) % cols],parameters)
            outputMat[i][j] += ((1.0 - coupledParameter) / 4.0) \
                                * function(mat[(i - 1 + rows) % rows][j],parameters)
            outputMat[i][j] += ((1.0 - coupledParameter) / 4.0) \
                                * function(mat[i][(j - 1 + cols) % cols],parameters)
    return outputMat

def scaleMatrix(mat,nbins):
    outputMat = [row[:] for row in mat]
    rows = len(mat)
    cols = len(mat[0])
    maximo = max(map(max, outputMat))
    minimo = min(map(min, outputMat))
    for i in range(rows):
        for j in range(cols):
            outputMat[i][j] = round((outputMat[i][j]-minimo)*nbins/(maximo-minimo))
    return numpy.array(outputMat)

